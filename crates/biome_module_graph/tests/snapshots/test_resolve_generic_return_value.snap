---
source: crates/biome_module_graph/tests/snap/mod.rs
expression: content
---
# `/src/index.ts`

## Source

```ts
function useCallback<T extends Function>(callback: T, deps: DependencyList): T;

export const makeOne = () => 1;

export const makeOneCb = useCallback(makeOne);

export const one = makeOneCb();
```

## Module Info

```
Exports {
  "makeOne" => {
    ExportOwnExport => JsOwnExport::Binding(4)
  }
  "makeOneCb" => {
    ExportOwnExport => JsOwnExport::Binding(5)
  }
  "one" => {
    ExportOwnExport => JsOwnExport::Binding(6)
  }
}
Imports {
  No imports
}
```

## Exported Bindings

```
BindingId(4) => JsBindingData {
  Name: makeOne,
  Type: Module(0) TypeId(5),
  Declaration kind: Value
}

BindingId(5) => JsBindingData {
  Name: makeOneCb,
  Type: Module(0) TypeId(6),
  Declaration kind: Value
}

BindingId(6) => JsBindingData {
  Name: one,
  Type: Module(0) TypeId(7),
  Declaration kind: Value
}
```

## Registered types

```
Module TypeId(0) => instanceof unresolved reference "Function" (scope ID: 1)

Module TypeId(1) => T extends Module(0) TypeId(0)

Module TypeId(2) => instanceof Module(0) TypeId(1)

Module TypeId(3) => instanceof unresolved reference "DependencyList" (scope ID: 1)

Module TypeId(4) => sync Function "useCallback" {
  accepts: {
    params: [
      required callback: Module(0) TypeId(2) (bindings: callback:instanceof Module(0) TypeId(1))
      required deps: Module(0) TypeId(3) (bindings: deps:instanceof unresolved reference "DependencyList" (scope ID: 1))
    ]
    type_args: [Module(0) TypeId(1)]
  }
  returns: Module(0) TypeId(2)
}

Module TypeId(5) => sync Function {
  accepts: {
    params: []
    type_args: []
  }
  returns: unknown reference
}

Module TypeId(6) => instanceof Module(0) TypeId(1)

Module TypeId(7) => Call Module(0) TypeId(6)(No parameters)
```
