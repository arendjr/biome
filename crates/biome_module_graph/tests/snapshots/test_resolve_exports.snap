---
source: crates/biome_module_graph/tests/snap/mod.rs
expression: content
---
## /src/index.ts

```ts
/**
 * @returns {string}
 */
function foo() {}

export { foo, qux };

/** @package */
export function bar() {}

/** @private */
export const quz = {};

/* @ignored because of incorrect amount of asterisks */
export async function baz() {}

var qux = 1;

export const {
	a,
	b,
	c: [d, e],
} = getObject();

type GetObjectResult = {
	a: string;
	b: Array<number>;
	c: [first: boolean, last: boolean | undefined];
};

function getObject(): GetObjectResult {
	return {}; // We're not a type checker, so this is a-okay.
}

/**
 * @public
 * @returns {JSX.Element}
 */
export default function Component(): JSX.Element {}

export * from "./reexports";
export { ohNo as "oh\x0Ano" } from "./renamed-reexports";

/**
 * Hello, namespace 2.
 */
export * as renamed2 from "./renamed-reexports";

```

```
Exports {
  "a" => {
    ExportOwnExport => JsOwnExport(
      Module TypeId(6)
      Local name: a
    )
  }
  "b" => {
    ExportOwnExport => JsOwnExport(
      Module TypeId(7)
      Local name: b
    )
  }
  "bar" => {
    ExportOwnExport => JsOwnExport(
      Module TypeId(1)
      Local name: bar
      JsDoc(
        @package
      )
    )
  }
  "baz" => {
    ExportOwnExport => JsOwnExport(
      Module TypeId(3)
      Local name: baz
    )
  }
  "d" => {
    ExportOwnExport => JsOwnExport(
      Module TypeId(9)
      Local name: d
    )
  }
  "default" => {
    ExportOwnExport => JsOwnExport(
      Module TypeId(19)
      Local name: Component
      JsDoc(
        @public
        @returns {JSX.Element}
      )
    )
  }
  "e" => {
    ExportOwnExport => JsOwnExport(
      Module TypeId(10)
      Local name: e
    )
  }
  "foo" => {
    ExportOwnExport => JsOwnExport(
      Module TypeId(0)
      Local name: foo
      JsDoc(
        @returns {string}
      )
    )
  }
  "oh\nno" => {
    ExportReexport => Reexport(
      Specifier: "./renamed-reexports"
      Resolved path: /src/renamed-reexports.ts
      Import Symbol: ohNo
    )
  }
  "qux" => {
    ExportOwnExport => JsOwnExport(
      Module TypeId(4)
      Local name: qux
    )
  }
  "quz" => {
    ExportOwnExport => JsOwnExport(
      Module TypeId(2)
      Local name: quz
      JsDoc(
        @private
      )
    )
  }
  "renamed2" => {
    ExportReexport => Reexport(
      Specifier: "./renamed-reexports"
      Resolved path: /src/renamed-reexports.ts
      Import Symbol: All
      JsDoc(
        Hello, namespace 2.
      )
    )
  }
}
Imports {}
```

## /src/renamed-reexports.ts

```ts
export function ohNo() {}

```

```
Exports {
  "ohNo" => {
    ExportOwnExport => JsOwnExport(
      Module TypeId(0)
      Local name: ohNo
    )
  }
}
Imports {}
```

## /src/reexports.ts

```ts
/**
 * Hello, namespace 1.
 */
export * as renamed from "./renamed-reexports";

```

```
Exports {
  "renamed" => {
    ExportReexport => Reexport(
      Specifier: "./renamed-reexports"
      Resolved path: /src/renamed-reexports.ts
      Import Symbol: All
      JsDoc(
        Hello, namespace 1.
      )
    )
  }
}
Imports {}
```
